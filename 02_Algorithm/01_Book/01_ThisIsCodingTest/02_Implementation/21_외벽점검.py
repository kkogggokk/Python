# https://programmers.co.kr/learn/courses/30/lessons/60062

def solution(n, weak, dist):
    answer = 0
    return answer

n1 = 12
week1 = [1, 5, 6, 10]
dist1 = [1, 2, 3, 4]

n2 = 12
week2 = [1, 3, 4, 9, 10]
dist2 = [3, 5, 7]

print(solution(n1, week1, dist1))
print(solution(n2, week2, dist2))

'''
특징1. 원으로 연결되어 처리한다. 연결되어 있다 처리를 어떻게 하면 좋을까?
    - 링크드 리스트? 이게 의미가 있을까? 연속적인 수를 처리 하기 위해서는 리스트로 처리하기 보다는 실수로 처리하는게 도움이 될것 같다. 
    - n으로부터 입력받은 수를 실수로 처리하면 될것 같은데, 근데 계속 돈다로 표현을 어떻게 하면 좋을지 고민이다. 
특징2. 사람 시작점 어떻게 처리 하면 좋을지? 4.5 정수가 아닌 실수로 출발해도 가능하다. 
특징3. 시계방향과 시계반대 방향 처리 
특징4. 끝나는 조건은? 

풀이 고민 
    - 0 ~ n ~ 0 이게 연결된 흐름으로 처리해야한다. <-- 이게 진짜 관건인거 같은데 링크드 리스트로 처리하는게 맞을지가 의문... ㅜㅜ 
    - 가장 큰 친구를 순으로 먼저 투입해본다. 
    - 0-6 을 반으로 나눴을 때 / 0-6까지 week 갯수와, 6-12 까지 week갯수를 비교한다 
        - 0-6 week갯수 더 많을 경우 : 
            - 시계 방으로 이동 
            - 시작점 : 가장 왼쪽에 있는 것(?) 선택한다. 
             흠... 으... 방향으로 따지니까... 나눠봤을때 어디가 가장 가까운지가...그걸 표현하는게 어렵네..
     
        - 6-12 week갯수가 더 많은 경우 :  시계 반대 방향으로 이동
    - 시작점 기준 
        - 
'''